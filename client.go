//generated by wl-scanner https://github.com/sternix/wl-scanner
package wl

const (
	DisplayErrorInvalidObject = 0
	DisplayErrorInvalidMethod = 1
	DisplayErrorNoMemory      = 2
)

const (
	ShmErrorInvalidFormat = 0
	ShmErrorInvalidStride = 1
	ShmErrorInvalidFd     = 2
)

const (
	ShmFormatArgb8888    = 0
	ShmFormatXrgb8888    = 1
	ShmFormatC8          = 0x20203843
	ShmFormatRgb332      = 0x38424752
	ShmFormatBgr233      = 0x38524742
	ShmFormatXrgb4444    = 0x32315258
	ShmFormatXbgr4444    = 0x32314258
	ShmFormatRgbx4444    = 0x32315852
	ShmFormatBgrx4444    = 0x32315842
	ShmFormatArgb4444    = 0x32315241
	ShmFormatAbgr4444    = 0x32314241
	ShmFormatRgba4444    = 0x32314152
	ShmFormatBgra4444    = 0x32314142
	ShmFormatXrgb1555    = 0x35315258
	ShmFormatXbgr1555    = 0x35314258
	ShmFormatRgbx5551    = 0x35315852
	ShmFormatBgrx5551    = 0x35315842
	ShmFormatArgb1555    = 0x35315241
	ShmFormatAbgr1555    = 0x35314241
	ShmFormatRgba5551    = 0x35314152
	ShmFormatBgra5551    = 0x35314142
	ShmFormatRgb565      = 0x36314752
	ShmFormatBgr565      = 0x36314742
	ShmFormatRgb888      = 0x34324752
	ShmFormatBgr888      = 0x34324742
	ShmFormatXbgr8888    = 0x34324258
	ShmFormatRgbx8888    = 0x34325852
	ShmFormatBgrx8888    = 0x34325842
	ShmFormatAbgr8888    = 0x34324241
	ShmFormatRgba8888    = 0x34324152
	ShmFormatBgra8888    = 0x34324142
	ShmFormatXrgb2101010 = 0x30335258
	ShmFormatXbgr2101010 = 0x30334258
	ShmFormatRgbx1010102 = 0x30335852
	ShmFormatBgrx1010102 = 0x30335842
	ShmFormatArgb2101010 = 0x30335241
	ShmFormatAbgr2101010 = 0x30334241
	ShmFormatRgba1010102 = 0x30334152
	ShmFormatBgra1010102 = 0x30334142
	ShmFormatYuyv        = 0x56595559
	ShmFormatYvyu        = 0x55595659
	ShmFormatUyvy        = 0x59565955
	ShmFormatVyuy        = 0x59555956
	ShmFormatAyuv        = 0x56555941
	ShmFormatNv12        = 0x3231564e
	ShmFormatNv21        = 0x3132564e
	ShmFormatNv16        = 0x3631564e
	ShmFormatNv61        = 0x3136564e
	ShmFormatYuv410      = 0x39565559
	ShmFormatYvu410      = 0x39555659
	ShmFormatYuv411      = 0x31315559
	ShmFormatYvu411      = 0x31315659
	ShmFormatYuv420      = 0x32315559
	ShmFormatYvu420      = 0x32315659
	ShmFormatYuv422      = 0x36315559
	ShmFormatYvu422      = 0x36315659
	ShmFormatYuv444      = 0x34325559
	ShmFormatYvu444      = 0x34325659
)

const (
	DataOfferErrorInvalidFinish     = 0
	DataOfferErrorInvalidActionMask = 1
	DataOfferErrorInvalidAction     = 2
	DataOfferErrorInvalidOffer      = 3
)

const (
	DataSourceErrorInvalidActionMask = 0
	DataSourceErrorInvalidSource     = 1
)

const (
	DataDeviceErrorRole = 0
)

const (
	DataDeviceManagerDndActionNone = 0
	DataDeviceManagerDndActionCopy = 1
	DataDeviceManagerDndActionMove = 2
	DataDeviceManagerDndActionAsk  = 4
)

const (
	ShellErrorRole = 0
)

const (
	ShellSurfaceResizeNone        = 0
	ShellSurfaceResizeTop         = 1
	ShellSurfaceResizeBottom      = 2
	ShellSurfaceResizeLeft        = 4
	ShellSurfaceResizeTopLeft     = 5
	ShellSurfaceResizeBottomLeft  = 6
	ShellSurfaceResizeRight       = 8
	ShellSurfaceResizeTopRight    = 9
	ShellSurfaceResizeBottomRight = 10
)

const (
	ShellSurfaceTransientInactive = 0x1
)

const (
	ShellSurfaceFullscreenMethodDefault = 0
	ShellSurfaceFullscreenMethodScale   = 1
	ShellSurfaceFullscreenMethodDriver  = 2
	ShellSurfaceFullscreenMethodFill    = 3
)

const (
	SurfaceErrorInvalidScale     = 0
	SurfaceErrorInvalidTransform = 1
)

const (
	SeatCapabilityPointer  = 1
	SeatCapabilityKeyboard = 2
	SeatCapabilityTouch    = 4
)

const (
	PointerErrorRole = 0
)

const (
	PointerButtonStateReleased = 0
	PointerButtonStatePressed  = 1
)

const (
	PointerAxisVerticalScroll   = 0
	PointerAxisHorizontalScroll = 1
)

const (
	PointerAxisSourceWheel      = 0
	PointerAxisSourceFinger     = 1
	PointerAxisSourceContinuous = 2
)

const (
	KeyboardKeymapFormatNoKeymap = 0
	KeyboardKeymapFormatXkbV1    = 1
)

const (
	KeyboardKeyStateReleased = 0
	KeyboardKeyStatePressed  = 1
)

const (
	OutputSubpixelUnknown       = 0
	OutputSubpixelNone          = 1
	OutputSubpixelHorizontalRgb = 2
	OutputSubpixelHorizontalBgr = 3
	OutputSubpixelVerticalRgb   = 4
	OutputSubpixelVerticalBgr   = 5
)

const (
	OutputTransformNormal     = 0
	OutputTransform90         = 1
	OutputTransform180        = 2
	OutputTransform270        = 3
	OutputTransformFlipped    = 4
	OutputTransformFlipped90  = 5
	OutputTransformFlipped180 = 6
	OutputTransformFlipped270 = 7
)

const (
	OutputModeCurrent   = 0x1
	OutputModePreferred = 0x2
)

const (
	SubcompositorErrorBadSurface = 0
)

const (
	SubsurfaceErrorBadSurface = 0
)

//Interface Request Codes
const (
	_DISPLAY_SYNC                       = 0
	_DISPLAY_GETREGISTRY                = 1
	_REGISTRY_BIND                      = 0
	_COMPOSITOR_CREATESURFACE           = 0
	_COMPOSITOR_CREATEREGION            = 1
	_SHMPOOL_CREATEBUFFER               = 0
	_SHMPOOL_DESTROY                    = 1
	_SHMPOOL_RESIZE                     = 2
	_SHM_CREATEPOOL                     = 0
	_BUFFER_DESTROY                     = 0
	_DATAOFFER_ACCEPT                   = 0
	_DATAOFFER_RECEIVE                  = 1
	_DATAOFFER_DESTROY                  = 2
	_DATAOFFER_FINISH                   = 3
	_DATAOFFER_SETACTIONS               = 4
	_DATASOURCE_OFFER                   = 0
	_DATASOURCE_DESTROY                 = 1
	_DATASOURCE_SETACTIONS              = 2
	_DATADEVICE_STARTDRAG               = 0
	_DATADEVICE_SETSELECTION            = 1
	_DATADEVICE_RELEASE                 = 2
	_DATADEVICEMANAGER_CREATEDATASOURCE = 0
	_DATADEVICEMANAGER_GETDATADEVICE    = 1
	_SHELL_GETSHELLSURFACE              = 0
	_SHELLSURFACE_PONG                  = 0
	_SHELLSURFACE_MOVE                  = 1
	_SHELLSURFACE_RESIZE                = 2
	_SHELLSURFACE_SETTOPLEVEL           = 3
	_SHELLSURFACE_SETTRANSIENT          = 4
	_SHELLSURFACE_SETFULLSCREEN         = 5
	_SHELLSURFACE_SETPOPUP              = 6
	_SHELLSURFACE_SETMAXIMIZED          = 7
	_SHELLSURFACE_SETTITLE              = 8
	_SHELLSURFACE_SETCLASS              = 9
	_SURFACE_DESTROY                    = 0
	_SURFACE_ATTACH                     = 1
	_SURFACE_DAMAGE                     = 2
	_SURFACE_FRAME                      = 3
	_SURFACE_SETOPAQUEREGION            = 4
	_SURFACE_SETINPUTREGION             = 5
	_SURFACE_COMMIT                     = 6
	_SURFACE_SETBUFFERTRANSFORM         = 7
	_SURFACE_SETBUFFERSCALE             = 8
	_SURFACE_DAMAGEBUFFER               = 9
	_SEAT_GETPOINTER                    = 0
	_SEAT_GETKEYBOARD                   = 1
	_SEAT_GETTOUCH                      = 2
	_SEAT_RELEASE                       = 3
	_POINTER_SETCURSOR                  = 0
	_POINTER_RELEASE                    = 1
	_KEYBOARD_RELEASE                   = 0
	_TOUCH_RELEASE                      = 0
	_OUTPUT_RELEASE                     = 0
	_REGION_DESTROY                     = 0
	_REGION_ADD                         = 1
	_REGION_SUBTRACT                    = 2
	_SUBCOMPOSITOR_DESTROY              = 0
	_SUBCOMPOSITOR_GETSUBSURFACE        = 1
	_SUBSURFACE_DESTROY                 = 0
	_SUBSURFACE_SETPOSITION             = 1
	_SUBSURFACE_PLACEABOVE              = 2
	_SUBSURFACE_PLACEBELOW              = 3
	_SUBSURFACE_SETSYNC                 = 4
	_SUBSURFACE_SETDESYNC               = 5
)

type DisplayErrorEvent struct {
	ObjectId Proxy
	Code     uint32
	Message  string
}

type DisplayDeleteIdEvent struct {
	Id uint32
}

type Display struct {
	BaseProxy
	ErrorChan    chan DisplayErrorEvent
	DeleteIdChan chan DisplayDeleteIdEvent
}

func NewDisplay(conn *Connection) *Display {
	ret := new(Display)
	ret.ErrorChan = make(chan DisplayErrorEvent)
	ret.DeleteIdChan = make(chan DisplayDeleteIdEvent)
	conn.Register(ret)
	return ret
}

func (p *Display) Sync() (*Callback, error) {
	ret := NewCallback(p.Connection())
	return ret, p.Connection().SendRequest(p, _DISPLAY_SYNC, Proxy(ret))
}

func (p *Display) GetRegistry() (*Registry, error) {
	ret := NewRegistry(p.Connection())
	return ret, p.Connection().SendRequest(p, _DISPLAY_GETREGISTRY, Proxy(ret))
}

type RegistryGlobalEvent struct {
	Name      uint32
	Interface string
	Version   uint32
}

type RegistryGlobalRemoveEvent struct {
	Name uint32
}

type Registry struct {
	BaseProxy
	GlobalChan       chan RegistryGlobalEvent
	GlobalRemoveChan chan RegistryGlobalRemoveEvent
}

func NewRegistry(conn *Connection) *Registry {
	ret := new(Registry)
	ret.GlobalChan = make(chan RegistryGlobalEvent)
	ret.GlobalRemoveChan = make(chan RegistryGlobalRemoveEvent)
	conn.Register(ret)
	return ret
}

func (p *Registry) Bind(name uint32, iface string, version uint32, id Proxy) error {
	return p.Connection().SendRequest(p, _REGISTRY_BIND, name, iface, version, id)
}

type CallbackDoneEvent struct {
	CallbackData uint32
}

type Callback struct {
	BaseProxy
	DoneChan chan CallbackDoneEvent
}

func NewCallback(conn *Connection) *Callback {
	ret := new(Callback)
	ret.DoneChan = make(chan CallbackDoneEvent)
	conn.Register(ret)
	return ret
}

type Compositor struct {
	BaseProxy
}

func NewCompositor(conn *Connection) *Compositor {
	ret := new(Compositor)
	conn.Register(ret)
	return ret
}

func (p *Compositor) CreateSurface() (*Surface, error) {
	ret := NewSurface(p.Connection())
	return ret, p.Connection().SendRequest(p, _COMPOSITOR_CREATESURFACE, Proxy(ret))
}

func (p *Compositor) CreateRegion() (*Region, error) {
	ret := NewRegion(p.Connection())
	return ret, p.Connection().SendRequest(p, _COMPOSITOR_CREATEREGION, Proxy(ret))
}

type ShmPool struct {
	BaseProxy
}

func NewShmPool(conn *Connection) *ShmPool {
	ret := new(ShmPool)
	conn.Register(ret)
	return ret
}

func (p *ShmPool) CreateBuffer(offset int32, width int32, height int32, stride int32, format uint32) (*Buffer, error) {
	ret := NewBuffer(p.Connection())
	return ret, p.Connection().SendRequest(p, _SHMPOOL_CREATEBUFFER, Proxy(ret), offset, width, height, stride, format)
}

func (p *ShmPool) Destroy() error {
	return p.Connection().SendRequest(p, _SHMPOOL_DESTROY)
}

func (p *ShmPool) Resize(size int32) error {
	return p.Connection().SendRequest(p, _SHMPOOL_RESIZE, size)
}

type ShmFormatEvent struct {
	Format uint32
}

type Shm struct {
	BaseProxy
	FormatChan chan ShmFormatEvent
}

func NewShm(conn *Connection) *Shm {
	ret := new(Shm)
	ret.FormatChan = make(chan ShmFormatEvent)
	conn.Register(ret)
	return ret
}

func (p *Shm) CreatePool(fd uintptr, size int32) (*ShmPool, error) {
	ret := NewShmPool(p.Connection())
	return ret, p.Connection().SendRequest(p, _SHM_CREATEPOOL, Proxy(ret), fd, size)
}

type BufferReleaseEvent struct {
}

type Buffer struct {
	BaseProxy
	ReleaseChan chan BufferReleaseEvent
}

func NewBuffer(conn *Connection) *Buffer {
	ret := new(Buffer)
	ret.ReleaseChan = make(chan BufferReleaseEvent)
	conn.Register(ret)
	return ret
}

func (p *Buffer) Destroy() error {
	return p.Connection().SendRequest(p, _BUFFER_DESTROY)
}

type DataOfferOfferEvent struct {
	MimeType string
}

type DataOfferSourceActionsEvent struct {
	SourceActions uint32
}

type DataOfferActionEvent struct {
	DndAction uint32
}

type DataOffer struct {
	BaseProxy
	OfferChan         chan DataOfferOfferEvent
	SourceActionsChan chan DataOfferSourceActionsEvent
	ActionChan        chan DataOfferActionEvent
}

func NewDataOffer(conn *Connection) *DataOffer {
	ret := new(DataOffer)
	ret.OfferChan = make(chan DataOfferOfferEvent)
	ret.SourceActionsChan = make(chan DataOfferSourceActionsEvent)
	ret.ActionChan = make(chan DataOfferActionEvent)
	conn.Register(ret)
	return ret
}

func (p *DataOffer) Accept(serial uint32, mime_type string) error {
	return p.Connection().SendRequest(p, _DATAOFFER_ACCEPT, serial, mime_type)
}

func (p *DataOffer) Receive(mime_type string, fd uintptr) error {
	return p.Connection().SendRequest(p, _DATAOFFER_RECEIVE, mime_type, fd)
}

func (p *DataOffer) Destroy() error {
	return p.Connection().SendRequest(p, _DATAOFFER_DESTROY)
}

func (p *DataOffer) Finish() error {
	return p.Connection().SendRequest(p, _DATAOFFER_FINISH)
}

func (p *DataOffer) SetActions(dnd_actions uint32, preferred_action uint32) error {
	return p.Connection().SendRequest(p, _DATAOFFER_SETACTIONS, dnd_actions, preferred_action)
}

type DataSourceTargetEvent struct {
	MimeType string
}

type DataSourceSendEvent struct {
	MimeType string
	Fd       uintptr
}

type DataSourceCancelledEvent struct {
}

type DataSourceDndDropPerformedEvent struct {
}

type DataSourceDndFinishedEvent struct {
}

type DataSourceActionEvent struct {
	DndAction uint32
}

type DataSource struct {
	BaseProxy
	TargetChan           chan DataSourceTargetEvent
	SendChan             chan DataSourceSendEvent
	CancelledChan        chan DataSourceCancelledEvent
	DndDropPerformedChan chan DataSourceDndDropPerformedEvent
	DndFinishedChan      chan DataSourceDndFinishedEvent
	ActionChan           chan DataSourceActionEvent
}

func NewDataSource(conn *Connection) *DataSource {
	ret := new(DataSource)
	ret.TargetChan = make(chan DataSourceTargetEvent)
	ret.SendChan = make(chan DataSourceSendEvent)
	ret.CancelledChan = make(chan DataSourceCancelledEvent)
	ret.DndDropPerformedChan = make(chan DataSourceDndDropPerformedEvent)
	ret.DndFinishedChan = make(chan DataSourceDndFinishedEvent)
	ret.ActionChan = make(chan DataSourceActionEvent)
	conn.Register(ret)
	return ret
}

func (p *DataSource) Offer(mime_type string) error {
	return p.Connection().SendRequest(p, _DATASOURCE_OFFER, mime_type)
}

func (p *DataSource) Destroy() error {
	return p.Connection().SendRequest(p, _DATASOURCE_DESTROY)
}

func (p *DataSource) SetActions(dnd_actions uint32) error {
	return p.Connection().SendRequest(p, _DATASOURCE_SETACTIONS, dnd_actions)
}

type DataDeviceDataOfferEvent struct {
	Id *DataOffer
}

type DataDeviceEnterEvent struct {
	Serial  uint32
	Surface *Surface
	X       float32
	Y       float32
	Id      *DataOffer
}

type DataDeviceLeaveEvent struct {
}

type DataDeviceMotionEvent struct {
	Time uint32
	X    float32
	Y    float32
}

type DataDeviceDropEvent struct {
}

type DataDeviceSelectionEvent struct {
	Id *DataOffer
}

type DataDevice struct {
	BaseProxy
	DataOfferChan chan DataDeviceDataOfferEvent
	EnterChan     chan DataDeviceEnterEvent
	LeaveChan     chan DataDeviceLeaveEvent
	MotionChan    chan DataDeviceMotionEvent
	DropChan      chan DataDeviceDropEvent
	SelectionChan chan DataDeviceSelectionEvent
}

func NewDataDevice(conn *Connection) *DataDevice {
	ret := new(DataDevice)
	ret.DataOfferChan = make(chan DataDeviceDataOfferEvent)
	ret.EnterChan = make(chan DataDeviceEnterEvent)
	ret.LeaveChan = make(chan DataDeviceLeaveEvent)
	ret.MotionChan = make(chan DataDeviceMotionEvent)
	ret.DropChan = make(chan DataDeviceDropEvent)
	ret.SelectionChan = make(chan DataDeviceSelectionEvent)
	conn.Register(ret)
	return ret
}

func (p *DataDevice) StartDrag(source *DataSource, origin *Surface, icon *Surface, serial uint32) error {
	return p.Connection().SendRequest(p, _DATADEVICE_STARTDRAG, source, origin, icon, serial)
}

func (p *DataDevice) SetSelection(source *DataSource, serial uint32) error {
	return p.Connection().SendRequest(p, _DATADEVICE_SETSELECTION, source, serial)
}

func (p *DataDevice) Release() error {
	return p.Connection().SendRequest(p, _DATADEVICE_RELEASE)
}

type DataDeviceManager struct {
	BaseProxy
}

func NewDataDeviceManager(conn *Connection) *DataDeviceManager {
	ret := new(DataDeviceManager)
	conn.Register(ret)
	return ret
}

func (p *DataDeviceManager) CreateDataSource() (*DataSource, error) {
	ret := NewDataSource(p.Connection())
	return ret, p.Connection().SendRequest(p, _DATADEVICEMANAGER_CREATEDATASOURCE, Proxy(ret))
}

func (p *DataDeviceManager) GetDataDevice(seat *Seat) (*DataDevice, error) {
	ret := NewDataDevice(p.Connection())
	return ret, p.Connection().SendRequest(p, _DATADEVICEMANAGER_GETDATADEVICE, Proxy(ret), seat)
}

type Shell struct {
	BaseProxy
}

func NewShell(conn *Connection) *Shell {
	ret := new(Shell)
	conn.Register(ret)
	return ret
}

func (p *Shell) GetShellSurface(surface *Surface) (*ShellSurface, error) {
	ret := NewShellSurface(p.Connection())
	return ret, p.Connection().SendRequest(p, _SHELL_GETSHELLSURFACE, Proxy(ret), surface)
}

type ShellSurfacePingEvent struct {
	Serial uint32
}

type ShellSurfaceConfigureEvent struct {
	Edges  uint32
	Width  int32
	Height int32
}

type ShellSurfacePopupDoneEvent struct {
}

type ShellSurface struct {
	BaseProxy
	PingChan      chan ShellSurfacePingEvent
	ConfigureChan chan ShellSurfaceConfigureEvent
	PopupDoneChan chan ShellSurfacePopupDoneEvent
}

func NewShellSurface(conn *Connection) *ShellSurface {
	ret := new(ShellSurface)
	ret.PingChan = make(chan ShellSurfacePingEvent)
	ret.ConfigureChan = make(chan ShellSurfaceConfigureEvent)
	ret.PopupDoneChan = make(chan ShellSurfacePopupDoneEvent)
	conn.Register(ret)
	return ret
}

func (p *ShellSurface) Pong(serial uint32) error {
	return p.Connection().SendRequest(p, _SHELLSURFACE_PONG, serial)
}

func (p *ShellSurface) Move(seat *Seat, serial uint32) error {
	return p.Connection().SendRequest(p, _SHELLSURFACE_MOVE, seat, serial)
}

func (p *ShellSurface) Resize(seat *Seat, serial uint32, edges uint32) error {
	return p.Connection().SendRequest(p, _SHELLSURFACE_RESIZE, seat, serial, edges)
}

func (p *ShellSurface) SetToplevel() error {
	return p.Connection().SendRequest(p, _SHELLSURFACE_SETTOPLEVEL)
}

func (p *ShellSurface) SetTransient(parent *Surface, x int32, y int32, flags uint32) error {
	return p.Connection().SendRequest(p, _SHELLSURFACE_SETTRANSIENT, parent, x, y, flags)
}

func (p *ShellSurface) SetFullscreen(method uint32, framerate uint32, output *Output) error {
	return p.Connection().SendRequest(p, _SHELLSURFACE_SETFULLSCREEN, method, framerate, output)
}

func (p *ShellSurface) SetPopup(seat *Seat, serial uint32, parent *Surface, x int32, y int32, flags uint32) error {
	return p.Connection().SendRequest(p, _SHELLSURFACE_SETPOPUP, seat, serial, parent, x, y, flags)
}

func (p *ShellSurface) SetMaximized(output *Output) error {
	return p.Connection().SendRequest(p, _SHELLSURFACE_SETMAXIMIZED, output)
}

func (p *ShellSurface) SetTitle(title string) error {
	return p.Connection().SendRequest(p, _SHELLSURFACE_SETTITLE, title)
}

func (p *ShellSurface) SetClass(class_ string) error {
	return p.Connection().SendRequest(p, _SHELLSURFACE_SETCLASS, class_)
}

type SurfaceEnterEvent struct {
	Output *Output
}

type SurfaceLeaveEvent struct {
	Output *Output
}

type Surface struct {
	BaseProxy
	EnterChan chan SurfaceEnterEvent
	LeaveChan chan SurfaceLeaveEvent
}

func NewSurface(conn *Connection) *Surface {
	ret := new(Surface)
	ret.EnterChan = make(chan SurfaceEnterEvent)
	ret.LeaveChan = make(chan SurfaceLeaveEvent)
	conn.Register(ret)
	return ret
}

func (p *Surface) Destroy() error {
	return p.Connection().SendRequest(p, _SURFACE_DESTROY)
}

func (p *Surface) Attach(buffer *Buffer, x int32, y int32) error {
	return p.Connection().SendRequest(p, _SURFACE_ATTACH, buffer, x, y)
}

func (p *Surface) Damage(x int32, y int32, width int32, height int32) error {
	return p.Connection().SendRequest(p, _SURFACE_DAMAGE, x, y, width, height)
}

func (p *Surface) Frame() (*Callback, error) {
	ret := NewCallback(p.Connection())
	return ret, p.Connection().SendRequest(p, _SURFACE_FRAME, Proxy(ret))
}

func (p *Surface) SetOpaqueRegion(region *Region) error {
	return p.Connection().SendRequest(p, _SURFACE_SETOPAQUEREGION, region)
}

func (p *Surface) SetInputRegion(region *Region) error {
	return p.Connection().SendRequest(p, _SURFACE_SETINPUTREGION, region)
}

func (p *Surface) Commit() error {
	return p.Connection().SendRequest(p, _SURFACE_COMMIT)
}

func (p *Surface) SetBufferTransform(transform int32) error {
	return p.Connection().SendRequest(p, _SURFACE_SETBUFFERTRANSFORM, transform)
}

func (p *Surface) SetBufferScale(scale int32) error {
	return p.Connection().SendRequest(p, _SURFACE_SETBUFFERSCALE, scale)
}

func (p *Surface) DamageBuffer(x int32, y int32, width int32, height int32) error {
	return p.Connection().SendRequest(p, _SURFACE_DAMAGEBUFFER, x, y, width, height)
}

type SeatCapabilitiesEvent struct {
	Capabilities uint32
}

type SeatNameEvent struct {
	Name string
}

type Seat struct {
	BaseProxy
	CapabilitiesChan chan SeatCapabilitiesEvent
	NameChan         chan SeatNameEvent
}

func NewSeat(conn *Connection) *Seat {
	ret := new(Seat)
	ret.CapabilitiesChan = make(chan SeatCapabilitiesEvent)
	ret.NameChan = make(chan SeatNameEvent)
	conn.Register(ret)
	return ret
}

func (p *Seat) GetPointer() (*Pointer, error) {
	ret := NewPointer(p.Connection())
	return ret, p.Connection().SendRequest(p, _SEAT_GETPOINTER, Proxy(ret))
}

func (p *Seat) GetKeyboard() (*Keyboard, error) {
	ret := NewKeyboard(p.Connection())
	return ret, p.Connection().SendRequest(p, _SEAT_GETKEYBOARD, Proxy(ret))
}

func (p *Seat) GetTouch() (*Touch, error) {
	ret := NewTouch(p.Connection())
	return ret, p.Connection().SendRequest(p, _SEAT_GETTOUCH, Proxy(ret))
}

func (p *Seat) Release() error {
	return p.Connection().SendRequest(p, _SEAT_RELEASE)
}

type PointerEnterEvent struct {
	Serial   uint32
	Surface  *Surface
	SurfaceX float32
	SurfaceY float32
}

type PointerLeaveEvent struct {
	Serial  uint32
	Surface *Surface
}

type PointerMotionEvent struct {
	Time     uint32
	SurfaceX float32
	SurfaceY float32
}

type PointerButtonEvent struct {
	Serial uint32
	Time   uint32
	Button uint32
	State  uint32
}

type PointerAxisEvent struct {
	Time  uint32
	Axis  uint32
	Value float32
}

type PointerFrameEvent struct {
}

type PointerAxisSourceEvent struct {
	AxisSource uint32
}

type PointerAxisStopEvent struct {
	Time uint32
	Axis uint32
}

type PointerAxisDiscreteEvent struct {
	Axis     uint32
	Discrete int32
}

type Pointer struct {
	BaseProxy
	EnterChan        chan PointerEnterEvent
	LeaveChan        chan PointerLeaveEvent
	MotionChan       chan PointerMotionEvent
	ButtonChan       chan PointerButtonEvent
	AxisChan         chan PointerAxisEvent
	FrameChan        chan PointerFrameEvent
	AxisSourceChan   chan PointerAxisSourceEvent
	AxisStopChan     chan PointerAxisStopEvent
	AxisDiscreteChan chan PointerAxisDiscreteEvent
}

func NewPointer(conn *Connection) *Pointer {
	ret := new(Pointer)
	ret.EnterChan = make(chan PointerEnterEvent)
	ret.LeaveChan = make(chan PointerLeaveEvent)
	ret.MotionChan = make(chan PointerMotionEvent)
	ret.ButtonChan = make(chan PointerButtonEvent)
	ret.AxisChan = make(chan PointerAxisEvent)
	ret.FrameChan = make(chan PointerFrameEvent)
	ret.AxisSourceChan = make(chan PointerAxisSourceEvent)
	ret.AxisStopChan = make(chan PointerAxisStopEvent)
	ret.AxisDiscreteChan = make(chan PointerAxisDiscreteEvent)
	conn.Register(ret)
	return ret
}

func (p *Pointer) SetCursor(serial uint32, surface *Surface, hotspot_x int32, hotspot_y int32) error {
	return p.Connection().SendRequest(p, _POINTER_SETCURSOR, serial, surface, hotspot_x, hotspot_y)
}

func (p *Pointer) Release() error {
	return p.Connection().SendRequest(p, _POINTER_RELEASE)
}

type KeyboardKeymapEvent struct {
	Format uint32
	Fd     uintptr
	Size   uint32
}

type KeyboardEnterEvent struct {
	Serial  uint32
	Surface *Surface
	Keys    []int32
}

type KeyboardLeaveEvent struct {
	Serial  uint32
	Surface *Surface
}

type KeyboardKeyEvent struct {
	Serial uint32
	Time   uint32
	Key    uint32
	State  uint32
}

type KeyboardModifiersEvent struct {
	Serial        uint32
	ModsDepressed uint32
	ModsLatched   uint32
	ModsLocked    uint32
	Group         uint32
}

type KeyboardRepeatInfoEvent struct {
	Rate  int32
	Delay int32
}

type Keyboard struct {
	BaseProxy
	KeymapChan     chan KeyboardKeymapEvent
	EnterChan      chan KeyboardEnterEvent
	LeaveChan      chan KeyboardLeaveEvent
	KeyChan        chan KeyboardKeyEvent
	ModifiersChan  chan KeyboardModifiersEvent
	RepeatInfoChan chan KeyboardRepeatInfoEvent
}

func NewKeyboard(conn *Connection) *Keyboard {
	ret := new(Keyboard)
	ret.KeymapChan = make(chan KeyboardKeymapEvent)
	ret.EnterChan = make(chan KeyboardEnterEvent)
	ret.LeaveChan = make(chan KeyboardLeaveEvent)
	ret.KeyChan = make(chan KeyboardKeyEvent)
	ret.ModifiersChan = make(chan KeyboardModifiersEvent)
	ret.RepeatInfoChan = make(chan KeyboardRepeatInfoEvent)
	conn.Register(ret)
	return ret
}

func (p *Keyboard) Release() error {
	return p.Connection().SendRequest(p, _KEYBOARD_RELEASE)
}

type TouchDownEvent struct {
	Serial  uint32
	Time    uint32
	Surface *Surface
	Id      int32
	X       float32
	Y       float32
}

type TouchUpEvent struct {
	Serial uint32
	Time   uint32
	Id     int32
}

type TouchMotionEvent struct {
	Time uint32
	Id   int32
	X    float32
	Y    float32
}

type TouchFrameEvent struct {
}

type TouchCancelEvent struct {
}

type Touch struct {
	BaseProxy
	DownChan   chan TouchDownEvent
	UpChan     chan TouchUpEvent
	MotionChan chan TouchMotionEvent
	FrameChan  chan TouchFrameEvent
	CancelChan chan TouchCancelEvent
}

func NewTouch(conn *Connection) *Touch {
	ret := new(Touch)
	ret.DownChan = make(chan TouchDownEvent)
	ret.UpChan = make(chan TouchUpEvent)
	ret.MotionChan = make(chan TouchMotionEvent)
	ret.FrameChan = make(chan TouchFrameEvent)
	ret.CancelChan = make(chan TouchCancelEvent)
	conn.Register(ret)
	return ret
}

func (p *Touch) Release() error {
	return p.Connection().SendRequest(p, _TOUCH_RELEASE)
}

type OutputGeometryEvent struct {
	X              int32
	Y              int32
	PhysicalWidth  int32
	PhysicalHeight int32
	Subpixel       int32
	Make           string
	Model          string
	Transform      int32
}

type OutputModeEvent struct {
	Flags   uint32
	Width   int32
	Height  int32
	Refresh int32
}

type OutputDoneEvent struct {
}

type OutputScaleEvent struct {
	Factor int32
}

type Output struct {
	BaseProxy
	GeometryChan chan OutputGeometryEvent
	ModeChan     chan OutputModeEvent
	DoneChan     chan OutputDoneEvent
	ScaleChan    chan OutputScaleEvent
}

func NewOutput(conn *Connection) *Output {
	ret := new(Output)
	ret.GeometryChan = make(chan OutputGeometryEvent)
	ret.ModeChan = make(chan OutputModeEvent)
	ret.DoneChan = make(chan OutputDoneEvent)
	ret.ScaleChan = make(chan OutputScaleEvent)
	conn.Register(ret)
	return ret
}

func (p *Output) Release() error {
	return p.Connection().SendRequest(p, _OUTPUT_RELEASE)
}

type Region struct {
	BaseProxy
}

func NewRegion(conn *Connection) *Region {
	ret := new(Region)
	conn.Register(ret)
	return ret
}

func (p *Region) Destroy() error {
	return p.Connection().SendRequest(p, _REGION_DESTROY)
}

func (p *Region) Add(x int32, y int32, width int32, height int32) error {
	return p.Connection().SendRequest(p, _REGION_ADD, x, y, width, height)
}

func (p *Region) Subtract(x int32, y int32, width int32, height int32) error {
	return p.Connection().SendRequest(p, _REGION_SUBTRACT, x, y, width, height)
}

type Subcompositor struct {
	BaseProxy
}

func NewSubcompositor(conn *Connection) *Subcompositor {
	ret := new(Subcompositor)
	conn.Register(ret)
	return ret
}

func (p *Subcompositor) Destroy() error {
	return p.Connection().SendRequest(p, _SUBCOMPOSITOR_DESTROY)
}

func (p *Subcompositor) GetSubsurface(surface *Surface, parent *Surface) (*Subsurface, error) {
	ret := NewSubsurface(p.Connection())
	return ret, p.Connection().SendRequest(p, _SUBCOMPOSITOR_GETSUBSURFACE, Proxy(ret), surface, parent)
}

type Subsurface struct {
	BaseProxy
}

func NewSubsurface(conn *Connection) *Subsurface {
	ret := new(Subsurface)
	conn.Register(ret)
	return ret
}

func (p *Subsurface) Destroy() error {
	return p.Connection().SendRequest(p, _SUBSURFACE_DESTROY)
}

func (p *Subsurface) SetPosition(x int32, y int32) error {
	return p.Connection().SendRequest(p, _SUBSURFACE_SETPOSITION, x, y)
}

func (p *Subsurface) PlaceAbove(sibling *Surface) error {
	return p.Connection().SendRequest(p, _SUBSURFACE_PLACEABOVE, sibling)
}

func (p *Subsurface) PlaceBelow(sibling *Surface) error {
	return p.Connection().SendRequest(p, _SUBSURFACE_PLACEBELOW, sibling)
}

func (p *Subsurface) SetSync() error {
	return p.Connection().SendRequest(p, _SUBSURFACE_SETSYNC)
}

func (p *Subsurface) SetDesync() error {
	return p.Connection().SendRequest(p, _SUBSURFACE_SETDESYNC)
}
